# -*- coding: utf-8 -*-
"""Gemma3_setup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zExwyni7AS-tbhI45TJl9RbJQlSp0Hic
"""

!pip install -q git+https://github.com/huggingface/transformers@v4.49.0-Gemma-3

from huggingface_hub import login
from google.colab import userdata

# Retrieve the token from Colab's Secret Manager
HF_TOKEN = userdata.get('HF_TOKEN')

# Log in to Hugging Face using the token
if HF_TOKEN:
    login(HF_TOKEN)
    print("Successfully logged in to Hugging Face!")
else:
    print("Token is not set.")

import torch
from transformers import AutoProcessor, Gemma3ForConditionalGeneration

ckpt = "google/gemma-3-4b-it"
model = Gemma3ForConditionalGeneration.from_pretrained(
    ckpt, device_map="auto", torch_dtype=torch.bfloat16,
)
processor = AutoProcessor.from_pretrained(ckpt)

from PIL import Image
from google.colab import files
import matplotlib.pyplot as plt

# Upload an image from your local machine
uploaded = files.upload()
image_path = next(iter(uploaded.keys()))  # Get the first uploaded file

# Load and display the uploaded image
image = Image.open(image_path)
plt.figure(figsize=(10, 10))
plt.imshow(image)
plt.axis('off')
plt.show()

# Create chat messages with the image
messages = [
    {
        "role": "system",
        "content": [{"type": "text", "text": "You are a helpful assistant."}]
    },
    {
        "role": "user",
        "content": [
            {"type": "image", "image": image},
            {"type": "text", "text": "What is in this image? Please describe it in detail."}
        ]
    }
]

# Process the messages with the chat template
inputs = processor.apply_chat_template(
    messages,
    add_generation_prompt=True,
    tokenize=True,
    return_dict=True,
    return_tensors="pt"
).to(model.device)

# Track the input length to extract only the new tokens later
input_len = inputs["input_ids"].shape[-1]

# Generate a response
with torch.inference_mode():
    generation = model.generate(
        **inputs,
        max_new_tokens=256,
        do_sample=False
    )
    # Extract only the newly generated tokens
    generation = generation[0][input_len:]

# Decode and print the response
response = processor.decode(generation, skip_special_tokens=True)
print("\nGemma 3's response:")
print(response)



